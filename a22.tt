include 'list'
include 'hash'

source readCards
  composer toInt <INT> end toInt
  @: [];
  $IN::lines -> #
  $@!

  when <'Player.*'> do ..|@: [];
  when <=''> do !VOID
  otherwise ..|@(last): $ -> toInt;
end readCards

def input: $readCards;

templates playGame
  @: $;
  1 -> #
  when <?($@ <[<[](0)>]>)> do
    $@... -> \(<[](1..)> $!\) -> $(last..1:-1) -> \[i]($i*$!\) -> list/sum !
  otherwise
    ^@(1..2;1) -> \(
      def cards: $;
      // being too math clever for my own good here, should just do a simple matcher array
      def winner: (($cards(1) list/naturalOrder $cards(2))) mod 3;
      [$cards($winner), $cards($winner mod 2 + 1)]... -> ..|@playGame($winner): $;
    \) -> !VOID
    $ + 1 -> #
end playGame

// part1
$input -> playGame -> '$;
' -> !OUT::write

templates recursiveCombat
  def player1Hands: [] -> hash/Set;
  def player2Hands: [] -> hash/Set;
  @: $;
  1 -> #
  when <?($@(1) -> player1Hands::isMember <=1>)
      | ?($@(2) -> player2Hands::isMember <=1>)> do 
    {duplicate: $@, set1: [$player1Hands::values], set2: [$player2Hands::values], winner: 1, hand: $@(1)} !
  when <?($@ <[<[](0)>]>)> do
    $@ -> \[i](<[](1..)> {winner: $i, hand: $} !\) -> $(1) !
  otherwise
    $@(1) -> player1Hands::add -> !VOID
    $@(2) -> player2Hands::add -> !VOID
    def cards: ^@(1..2;1);
    def winner: $cards -> \(
      when <?($(1) <..$@recursiveCombat(1)::length>)
        ?($(2) <..$@recursiveCombat(2)::length>)> do
        [$@recursiveCombat(1; 1..$(1)), $@recursiveCombat(2; 1..$(2))] -> recursiveCombat -> $.winner !
      otherwise
        (($cards(1) list/naturalOrder $cards(2))) mod 3 !
    \);
    ..|@recursiveCombat($winner): $cards($winner);
    ..|@recursiveCombat($winner): $cards($winner mod 2 + 1);
    $ + 1 -> #
end recursiveCombat

// part2
$input -> recursiveCombat -> $.hand(last..1:-1) -> \[i]($i*$!\) -> list/sum -> '$;
' -> !OUT::write

test 'recursive combat'
  assert [[9, 2, 6, 3, 1],[5, 8, 4, 7, 10]] -> recursiveCombat
    <{winner: <=2>, hand: <=[7, 5, 6, 2, 4, 1, 10, 8, 9, 3]>}> 'example'
end 'recursive combat'