// A look at what this might be in sql or relational syntax
// bagrules is a relation/table on {container:, contained:, amount:}
composer bagRule
  (<colour> -> @:$;) (<=' bags contain '>) <content|none>+ (<='.'>)
  rule colour: <'\w+ \w+'>
  rule content: {container: $@, amount: <INT>, (<=' '>) contained: <colour>} (<' bags?(, )?'>)
  rule none: (<='no other bags'>)
end bagRule

def bagrules: {[$IN::lines -> bagRule]};

// part 1 sql
// with recursive bags as 
// (select container from bagrules
//   where contained = 'shiny gold'
// union
//   select r.container from bagrules r join bags b on r.contained = b.container
// ) select count(*) from bags;

// Some kind of relational algebra
// function containers(b):
//   if (isempty(b)) return b
//   def c: (bagrules & b).project({container:}).rename(container:, contained:);
//   return c | containers(c)
//
// containers([{contained: 'shiny gold'}]).count()

// tailspin relational syntax
templates containers
  when <?($::count <=0>)> do $!
  otherwise
    ($ join $bagrules) -> $({contained: §.container})
    -> ($ union ($ -> containers)) !
end containers

{[{contained: 'shiny gold'}]} -> containers -> $::count -> '$;
' -> !OUT::write

// part 2 sql, beware that duplicate rows may be removed
// with recursive bags as
// (select 'x' as container, 'shiny gold' as contained, 1 as amount
// union
//   select r.container, r.contained, b.amount * r.amount from bagrules r join bags b on r.container = b.contained
// ) select sum(amount) where contained != 'shiny gold';

// relational algebra
// function contents(b):
//   if (isempty(b)) return b
//   def c:  (b.project({amount:, contained:}).rename(amount:, multiplier:).rename(contained:, container:)
//     & bagrules)
//     .extend(tally:, lambda t: t.amount * t.multiplier)
//     .project({container:, contained:, tally:}).rename(tally:, amount:);
//   return c | contents(c)
//
// contents([{container: 'x', contained: 'shiny gold', amount: 1}])).sum(amount:)

// tailspin relational syntax. NOTE: this is BUGGY, if amounts and colours are duplicated, they will be removed
templates contents
  when <?($::count <=0>)> do $!
  otherwise
    $({multiplier: §.amount, container: §.contained})
      -> ($ join $bagrules) -> $({container:, contained:, amount: §.amount * §.multiplier})
      -> ($ union ($ -> contents)) !
end contents

{[{container: 'x', contained: 'shiny gold', amount: 1}]} -> contents ... -> ..=Sum&{of: :(amount:)} -> '$;
' -> !OUT::write

// always get correct result with a unique id on each tuple we want to keep
processor Counter
  @: 0;
  source next
    @Counter: $@Counter + 1;
    $@Counter !
  end next
end Counter

def idgen: $Counter;

// NOTE: this is incorrect relational algebra because the generated tuples do not state facts:
// In the generated tuples the container given does not contain the given amounts of the contained
templates contents2
  when <?($::count <=0>)> do $!
  otherwise
    $({multiplier: §.amount, container: §.contained, tempid: $idgen::next})
      -> ($ join $bagrules) -> $({container:, contained:, amount: §.amount * §.multiplier, tempid: $idgen::next})
      -> ($ union ($ -> contents2)) !
end contents2

{[{container: 'x', contained: 'shiny gold', amount: 1}]} -> contents2 ... -> ..=Sum&{of: :(amount:)} -> '$;
' -> !OUT::write

// Here we have a solution that uses relational algebra correctly, where each tuple states the fact that
// "The outer container contains this amount of the contained type via the given path".
// For sake of illustration, the actual path is generated, but it could be represented by a tempid as above.
// If the entire bagrules relation is input, the answer for all bags will be given at the same time.
templates contents3
  when <?($::count <=0>)> do $!
  otherwise
    $({container:, path:, multiplier: §.amount, z: §.contained})
      -> ($ join $bagrules({z: §.container, contained:, amount:}))
      -> $({container:, contained:, amount: §.amount * §.multiplier, path: [§.path..., §.z]})
      -> ($ union ($ -> contents3)) !
end contents3

($bagrules join {[{container: 'shiny gold', path: []}]}) -> ($ union ($ -> contents3))
-> $(by {[{container: 'shiny gold'}]} collect {totalInside:Sum&{of: :(amount:)}}) ... -> '$.totalInside;
' -> !OUT::write
