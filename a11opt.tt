def input: [$IN::lines -> [$...]];

templates getAffectingPositions&{in:, lineOfSight:}
  def pos: $;
  [[{di: -1, dj: -1},
    {di: -1, dj: 0},
    {di: -1, dj: 1},
    {di: 0, dj: 1},
    {di: 1, dj: 1},
    {di: 1, dj: 0},
    {di: 1, dj: -1},
    {di: 0, dj: -1}]... -> {$..., i: $pos.i + $.di, j: $pos.j + $.dj} -> #] !
  when <?($.i <..~1>)|?($.i <$in::length~..>)|?($.j <..~1>)|?($.j <$in($.i)::length~..>)> do
    !VOID
  when <?($in($.i; $.j) <='L'>)> do // All seats are open at start
    {i: $.i, j: $.j} !
  when <?($lineOfSight <=1>)> do
    {$..., i: $.i + $.di, j: $.j + $.dj} -> #
end getAffectingPositions

templates model&{lineOfSight:}
  def input: $;
  def affecting: $ -> \[i;j](
    when <='L'> do
      {i: $i, j: $j} -> getAffectingPositions&{in: $input, lineOfSight: $lineOfSight} !
    otherwise [] !
  \);
  @: $;

  templates addAffectingOccupied
    @: {total: 0, fixed: 0};
    $affecting($.i; $.j)... -> $@model($.i; $.j) -> #
    { $..., $@... }!
    <='+'> @.total: $@.total + 1;
    <='#'> @.total: $@.total + 1; @.fixed: 1;
  end addAffectingOccupied

  [$ -> \[i;j](<='L'> {i: $i, j: $j}!\)... ...] -> #
  $@ -> \(
    @: 0;
    $... ... -> \(<='#'> $!\) -> @: $@ + 1;
    $@!
  \)!

  when <[](1..)> do
    $ -> \determineChanges(
      [$... -> addAffectingOccupied -> #] !
      when <{total: <=0>} ?($@model($.i;$.j) <='L'>)>
        {i: $.i, j: $.j, value: '+'} !
      when <{fixed: <=0>} ?($@model($.i;$.j) <='L'>)>
        {i: $.i, j: $.j, value: 'L'} !
      when <{total: <4..>} ?($lineOfSight <=0>) ?($@model($.i;$.j) <='+'>)>
        {i: $.i, j: $.j, value: 'L'} !
      when <{total: <5..>} ?($lineOfSight <=1>) ?($@model($.i;$.j) <='+'>)>
        {i: $.i, j: $.j, value: 'L'} !
      when <?($@model($.i;$.j) <='+'>)>
        {i: $.i, j: $.j, value: '#'} ! // fixed
    \determineChanges)
    -> [$... -> \applyChanges(
      @model($.i; $.j): $.value;
      $ -> #
      <~='#'> $ !
    \applyChanges)] -> #
end model

//part1
$input -> model&{lineOfSight: 0} -> '$;
' -> !OUT::write

//part2
$input -> model&{lineOfSight: 1} -> '$;
' -> !OUT::write
