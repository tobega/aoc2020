// A look at what this might be in sql or relational syntax
//groups: {groupno:, member:, question:}

templates groupAsRelations
  @: {groupno: 1, member: 1};
  $... -> #
  when <=''> do @: {groupno: $@.groupno + 1, member: 1};
  otherwise
    $... -> {groupno: $@.groupno, member: $@.member, question: $}!
    @.member: $@.member + 1;
end groupAsRelations

def groups: {|[$IN::lines] -> groupAsRelations|};

//part 1 sql
// select sum(qpergroup) from (select count(distinct(question)) from groups as qpergroup group by groupno)

// relational algebra
// groups.project(groupno:, question:).group([question:], questions:).extend(qpergroup:, lambda t: t.questions.count())
//   .sum(lambda t: t.qpergroup)

//tailspin
$groups(by $groups({groupno:}) collect {questions: Group&{of: :({question:})}})
 -> $({groupno:, qpergroup: ยง.questions::count}) ... -> ..=Sum&{of: :(qpergroup:)} -> '$;
' -> !OUT::write

// part 2 sql
// select sum(qpergroup) from
//   (1select groupno, count(distinct(question)) from
//     (2select groupno, question from groups as r
//       where not exists
//       (3select member from groups as s
//         where s.groupno = r.groupno
//         and not exists
//         (4select question from groups as r2
//           where r2.groupno = r.groupno
//           and r2.member = s.member
//           and r2.question = r.question
//         )
//       )
//     ) group by groupno
//   )

// relational
// groups.group([member:, question:], questions:).extend(members:, lambda t: t.questions.project(member:))
//   .extend(qforall:, lambda t: (t.questions divide t.members).count()).sum(qforall:)

//tailspin
$groups(by $groups({groupno:}) collect {members: Group&{of: :({member:})}, answers: Group&{of: :({member:, question:})}})
  -> $({groupno:, answeredbyall: (ยง.answers divide&{over: ยง.answers({question:})} ยง.members) -> $::count})
  ... -> ..=Sum&{of: :(answeredbyall:)} -> '$;
' -> !OUT::write
