def input: [$IN::lines -> ['.', $..., '.']] -> [[1..$(1)::length -> '.'], $..., [1..$(1)::length -> '.']];

templates countOccupied
  @:0;
  $... ... -> #
  $@!
  <='#'> @: $@ + 1;
end countOccupied

templates modelSeating
  @:{changed:1};
  $ -> #
  when <?($@.changed <=0>)> do $ -> countOccupied !
  otherwise
    @.changed: 0;
    def seating: $;
    $ -> \[i;j](
      when <?($i <..1>)|?($i <$seating::length..>)|?($j <..1>)|?($j <$seating($i)::length..>)> do
        $ !
      when <='L' ?($seating($i-1..$i+1; $j-1..$j+1) -> countOccupied <=0>)> do
        @modelSeating.changed: 1;
        '#'!
      when <='#' ?($seating($i-1..$i+1; $j-1..$j+1) -> countOccupied <5..>)> do
        @modelSeating.changed: 1;
        'L'!
      otherwise
        $!
    \) -> #
end modelSeating

//part1
$input -> modelSeating -> '$;
' -> !OUT::write

templates countVisibleOccupied&{in:}
  @:0;
  def pos: $;
  [{di: -1, dj: -1},
    {di: -1, dj: 0},
    {di: -1, dj: 1},
    {di: 0, dj: 1},
    {di: 1, dj: 1},
    {di: 1, dj: 0},
    {di: 1, dj: -1},
    {di: 0, dj: -1}]... -> {$..., i: $pos.i + $.di, j: $pos.j + $.dj} -> #
  $@!
  when <?($.i <..1>)|?($.i <$in::length..>)|?($.j <..1>)|?($.j <$in($.i)::length..>)> do
    !VOID
  when <?($in($.i; $.j) <='L'>)> do
    !VOID
  when <?($in($.i; $.j) <='#'>)> do
    @: $@ + 1;
  otherwise
    {$..., i: $.i + $.di, j: $.j + $.dj} -> #
end countVisibleOccupied

templates modelSeating2
  @:{changed:1};
  $ -> #
  when <?($@.changed <=0>)> do $ -> countOccupied !
  otherwise
    @.changed: 0;
    def seating: $;
    $ -> \[i;j](
      when <?($i <..1>)|?($i <$seating::length..>)|?($j <..1>)|?($j <$seating($i)::length..>)> do
        $ !
      when <='L' ?({i: $i, j: $j} -> countVisibleOccupied&{in: $seating} <=0>)> do
        @modelSeating2.changed: 1;
        '#'!
      when <='#' ?({i: $i, j: $j} -> countVisibleOccupied&{in: $seating} <5..>)> do
        @modelSeating2.changed: 1;
        'L'!
      otherwise
        $!
    \) -> #
end modelSeating2

//part2
$input -> modelSeating2 -> '$;
' -> !OUT::write
